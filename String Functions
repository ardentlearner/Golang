// The standard library's strings package provides many useful string-related functions

package main

import (
	"fmt"
	s "strings"
)

// We alias fmt.Println to a shorter name as we will use it a lot below

var p = fmt.Println

func main() {

	// Sample of the functions available in strings
	// Since these are functions from the package, not methods on the string object itself, we need to pass the string as the first argument

	p("Contains: ", s.Contains("test", "es"))
	p("Count: ", s.Count("test", "t"))
	p("HasPrefix: ", s.HasPrefix("test", "te"))
	p("HasSuffix: ", s.HasSuffix("test", "st"))
	p("Index: ", s.Index("test", "e"))
	p("Join: ", s.Join([]string{"a", "b"}, "-"))
	p("Repeat: ", s.Repeat("a", 5))
	p("Rpeplace: ", s.Replace("foo", "o", "0", -1))
	p("Replace: ", s.Replace("foo", "o", "0", 1))
	p("Split: ", s.Split("a-b-c-d-e", "-"))
	p("ToLower: ", s.ToLower("TEST"))
	p("ToUpper: ", s.ToUpper("test"))
	p()

	//len and indexing work at the byte level
	// Go uses UTF-8 encoded strings
	// If you are working with potentially multi-byte characters, you will want to use encoding-aware opereations

	p("Len: ", len("hello"))
	p("Char:", "hello"[1])
}
