// Timeouts are important for programs that connect to external resources

package main

import (
	"fmt"
	"time"
)

func main() {

	// Execute external call that returns result on channel c1 after 2 seconds
	// Channel is buffered -- send in the goroutine is nonblocking (prevents goroutine leak in case the channel is never read)

	c1 := make(chan string, 1)
	go func() {
		time.Sleep(2 * time.Second)
		c1 <- "result 1"
	}()

	// res := <-c1 awaits the result and <-time.After awaits a value to be sent after the timeout of 1 second
	// Since select proceeds witht he first receive that is ready, it will take the timeout case if the operation takes more than 1 second

	select {
	case res := <-c1:
		fmt.Println(res)
	case <-time.After(1 * time.Second):
		fmt.Println("timeout 1")
	}

	c2 := make(chan string, 1)
	go func() {
		time.Sleep(2 * time.Second)
		c2 <- "result 2"
	}()

	// If we allow a longer timeout of 3 seconds, then the receive from c2 will succeed

	select {
	case res := <-c2:
		fmt.Println(res)
	case <-time.After(3 * time.Second):
		fmt.Println("timeout 2")
	}
}
