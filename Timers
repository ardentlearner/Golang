// Timers are used to execute Go code at some point in the future, or repeatedly at some interval

package main

import (
	"fmt"
	"time"
)

func main() {

	// Timers represent a single event in the future

	// You tell the timer how long you wait to wait, and it provides a channel that will be notified at that time

	timer1 := time.NewTimer(2 * time.Second)

	// <-timer1.C blocks on the timer's channel C until it sends a value indicating that the timer fired

	<-timer1.C
	fmt.Println("Timer 1 fired")

	// If you just wanted to wait, you could have used time.Sleep
	// Timer is useful because you can cancel the timer before it fires...

	timer2 := time.NewTimer(time.Second)

	go func() {
		<-timer2.C
		fmt.Println("Timer 2 fired")
	}()

	stop2 := timer2.Stop()
	if stop2 {
		fmt.Println("Timer 2 stopped")
	}

	// Give timer2 enough time to fire -- shows it in fact stopped

	time.Sleep(2 * time.Second)
}
