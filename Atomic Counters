// The primary mechanism for managing state in Go is communication over channels (e.g. worker pools)
// Another option for managing state is using the sync/atomic package for atomic counters accessed by multiple goroutines

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

func main() {

	// We will use an unsigned integer to represent our counter

	var ops uint64

	// A WaitGroup will help us wait for all goroutines to finish their work

	var wg sync.WaitGroup

	// We will start 50 goroutines that each increment the counter exactly 1000 times

	for i := 0; i < 50; i++ {
		wg.Add(1)

		// To atomically increment the counter we use AddUint64, giving it the memory address of our ops counter with the & syntax

		go func() {
			for c := 0; c < 1000; c++ {

				atomic.AddUint64(&ops, 1)
			}
			wg.Done()
		}()
	}

	// Wait untill all the goroutines are done

	wg.Wait()

	// It is safe to access ops now because we know no other goroutine is writing to it.
	// Reading atomics safely while they are being updated is also possible, using functions like atomic.LoadUint64

	fmt.Println("ops", ops)

	// We expect to get exactly 50 000 operations
	// If we used non-atomic ops++ to increment the counter, we would likely get a different number, changing between runs
	// This is because the goroutines would interfere with each other
	// Moreover, we would get data race failures when running with the -race flag
}
