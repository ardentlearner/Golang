// Simple counter state can be managed using atomic operations
// For more complex state we can use a mutex to safely access data across multiple goroutines

package main

import (
	"fmt"
	"math/rand"
	"sync"
	"sync/atomic"
	"time"
)

func main() {

	// The state will be a map

	var state = make(map[int]int)

	// The mutex will synchronize access to state

	var mutex = &sync.Mutex{}

	// We will keep track of how many read and write operations we do

	var readOps uint64
	var writeOps uint64

	// We start with 100 goroutines to execute repeated reads against the state, once per ms in each goroutine

	for r := 0; r < 100; r++ {
		go func() {
			total := 0

			// For each read we pick a key to access, Lock() the mutex to ensure exclusive access to the state
			// We read the value at the chosen key, Unlock() the mutex, and increment the readOps count

			for {
				key := rand.Intn(5)
				mutex.Lock()
				total += state[key]
				mutex.Unlock()
				atomic.AddUint64(&readOps, 1)

				// Wait between reads

				time.Sleep(time.Millisecond)
			}
		}()
	}

	// We also start 10 goroutines to simulate writes, using the same pattern we did for reads

	for w := 0; w < 10; w++ {
		go func() {
			for {
				key := rand.Intn(5)
				value := rand.Intn(100)
				mutex.Lock()
				state[key] = value
				mutex.Unlock()
				atomic.AddUint64(&writeOps, 1)
				time.Sleep(time.Millisecond)
			}
		}()
	}

	// Let the 10 goroutines work on the state and mutex for a second

	time.Sleep(time.Second)

	// Report final operation counts

	readOpsFinal := atomic.LoadUint64(&readOps)
	fmt.Println("readOps: ", readOpsFinal)
	writeOpsFinal := atomic.LoadUint64(&writeOps)
	fmt.Println("writeOps: ", writeOpsFinal)

	// Final lock of state; show resulting state

	mutex.Lock()
	fmt.Println("state ", state)
	mutex.Unlock()

	// Running the program shows that we executed about 70 000 total ops. against our mutex-synchronized state
}
