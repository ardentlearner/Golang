// A panic means something went unexpectedly wrong
// We use panic to fail fast on errors that shoulnd't occur during normal operation, or that we are not prepared to handle gracefully

package main

import "os"

func main() {

	panic("a problem")

	// A common use of panic is to abort if a function returns an error value that we do not know how to (or want to) handle
	// Here is an example of panicking if we get an unexpected error when creating a new file

	_, err := os.Create("/tmp/file")
	if err != nil {
		panic(err)
	}

	//Running this program will cause it to panic, print an error message and goroutine traces, and exit with a non-zero status
	// Not that unlike some languages which use exceptions for handling of many errors, in Go it is idiomatic to use error-indicating return values wherever possible
}
