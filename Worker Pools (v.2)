// We will look at how to implement a worker pool using goroutines and channels

package main

import (
	"fmt"
	"time"
)

func worker(id int, jobs <-chan int, results chan<- int) {
	for j := range jobs {
		fmt.Println("worker", id, "started job", j)
		time.Sleep(time.Second)
		fmt.Println("worker", id, "finished job", j)
		results <- j * 2
	}
}

func main() {

	const numJobs = 5

	// In order to use our pool of workers, we need to send them work and collect their results
	// We make 2 channels for this

	jobs := make(chan int, numJobs)
	results := make(chan int, numJobs)

	// We started up 3 workers
	// Initially blocked because there are no jobs yet

	for w := 1; w <= 3; w++ {
		go worker(w, jobs, results)
	}

	// Here, we send 5 jobs and then close that channel to indicate that is all the work we have

	for j := 1; j <= numJobs; j++ {
		jobs <- j
	}
	close(jobs)

	// Finally, we collect all the results of the work
	// The ensures that the worker goroutines have finished (can also use WaitGroup to wait for multiple goroutines)

	for a := 1; a <= numJobs; a++ {
		<-results
	}

	// 5 jobs are being executed by various workers
	// The program takes ~2 seconds despite doing ~5 seconds of total work because 3 workers are operating concurrently
}
