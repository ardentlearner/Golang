// Closing a channel indicates that no more values will be sent on it
// Useful to communicate completion to the channel's receivers

package main

import "fmt"

func main() {

	// jobs channel communicates work to be done from the main() goroutine to a worker goroutine
	// We will close the jobs channel when we have no more jobs for the worker

	jobs := make(chan int, 5)
	done := make(chan bool)

	// Here is the worker goroutine
	// Repeatedly receives from jobs with j, more := <- jobs
	// Special 2-value form of receive, the more value will be false if jobs has been closed and all values in the channel have been received
	// We use this to notify on done when we have worked all our jobs

	go func() {
		for {
			j, more := <-jobs
			if more {
				fmt.Println("received job", j)
			} else {
				fmt.Println("received all jobs")
				done <- true
				return
			}
		}
	}()

	// Sends 3 kobs to the worker over the jobs channel, then closes it

	for j := 1; j <= 3; j++ {
		jobs <- j
		fmt.Println("sent job", j)
	}
	close(jobs)
	fmt.Println("sent all jobs")

	// Await the worker using synchronization approach

	<-done
}
