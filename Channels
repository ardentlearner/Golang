// Channels are pipes that connect concurrent goroutines

package main

import "fmt"

func main() {

	// By default sends and receives block until both the sender and receiver are ready
	// This allowed us to wait at the end of the program for the "ping" message without any other synchronization
	// Synchronization is fundamental in the interaction between the send and receive on the channel; one cannot happen without the other

	messages := make(chan string)

	go func() { messages <- "ping" }()

	msg := <-messages

	fmt.Println(msg)

